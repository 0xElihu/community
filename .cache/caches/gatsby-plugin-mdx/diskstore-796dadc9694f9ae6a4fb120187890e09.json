{"expireTime":9007200856297980000,"key":"gatsby-plugin-mdx-entire-payload-05e78d4fe30bf190c60ee846d62adacd-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/rejon/community/src/modules/layouts/mdx_layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":85,"offset":86},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":88},"end":{"line":5,"column":29,"offset":116},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"How to Use GitHub For One-off Changes","position":{"start":{"line":8,"column":3,"offset":121},"end":{"line":8,"column":40,"offset":158},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":119},"end":{"line":8,"column":40,"offset":158},"indent":[]}},{"type":"jsx","value":"<Process>","position":{"start":{"line":10,"column":1,"offset":160},"end":{"line":10,"column":10,"offset":169},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":12,"column":1,"offset":171},"end":{"line":12,"column":6,"offset":176},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Log into Github","position":{"start":{"line":14,"column":4,"offset":181},"end":{"line":14,"column":19,"offset":196},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":178},"end":{"line":14,"column":19,"offset":196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Make sure you have a GitHub account and you’re logged in.","position":{"start":{"line":16,"column":1,"offset":198},"end":{"line":16,"column":58,"offset":255},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":198},"end":{"line":16,"column":58,"offset":255},"indent":[]}},{"type":"jsx","value":"<Button to=\"https://github.com/login\">Go to Github</Button>","position":{"start":{"line":18,"column":1,"offset":257},"end":{"line":18,"column":60,"offset":316},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":20,"column":1,"offset":318},"end":{"line":20,"column":7,"offset":324},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":22,"column":1,"offset":326},"end":{"line":22,"column":6,"offset":331},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fork the Repo","position":{"start":{"line":24,"column":5,"offset":337},"end":{"line":24,"column":18,"offset":350},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":333},"end":{"line":24,"column":18,"offset":350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For simple one off tasks, go to the Github website, and ","position":{"start":{"line":26,"column":1,"offset":352},"end":{"line":26,"column":57,"offset":408},"indent":[]}},{"type":"link","title":null,"url":"https://docs.github.com/en/github/getting-started-with-github/fork-a-repo","children":[{"type":"text","value":"fork","position":{"start":{"line":26,"column":58,"offset":409},"end":{"line":26,"column":62,"offset":413},"indent":[]}}],"position":{"start":{"line":26,"column":57,"offset":408},"end":{"line":26,"column":138,"offset":489},"indent":[]}},{"type":"text","value":" the repository (AKA repo) you are making a change to.","position":{"start":{"line":26,"column":138,"offset":489},"end":{"line":26,"column":192,"offset":543},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":352},"end":{"line":26,"column":192,"offset":543},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Forking the repo creates your a version of the site on your GitHub so you can make changes without impacting the original project.","position":{"start":{"line":28,"column":1,"offset":545},"end":{"line":28,"column":131,"offset":675},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":545},"end":{"line":28,"column":131,"offset":675},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Fork","position":{"start":{"line":30,"column":5,"offset":681},"end":{"line":30,"column":9,"offset":685},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":677},"end":{"line":30,"column":9,"offset":685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On the GitHub Website, navigate to the repository you want to change. For example, ","position":{"start":{"line":32,"column":1,"offset":687},"end":{"line":32,"column":84,"offset":770},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/makerdao/community","children":[{"type":"text","value":"Community Development's GitHub","position":{"start":{"line":32,"column":85,"offset":771},"end":{"line":32,"column":115,"offset":801},"indent":[]}}],"position":{"start":{"line":32,"column":84,"offset":770},"end":{"line":32,"column":155,"offset":841},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":32,"column":155,"offset":841},"end":{"line":32,"column":156,"offset":842},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":687},"end":{"line":32,"column":156,"offset":842},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the top-right corner of the page, click fork\n","position":{"start":{"line":34,"column":1,"offset":844},"end":{"line":35,"column":1,"offset":892},"indent":[1]}},{"type":"image","title":null,"url":"/images/github-fork-community.png","alt":"click Fork","position":{"start":{"line":35,"column":1,"offset":892},"end":{"line":35,"column":49,"offset":940},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":35,"column":49,"offset":940},"end":{"line":35,"column":50,"offset":941},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":844},"end":{"line":35,"column":50,"offset":941},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"That is it. You are now ready to add a file or make changes to any existing file.","position":{"start":{"line":37,"column":1,"offset":943},"end":{"line":37,"column":82,"offset":1024},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":943},"end":{"line":37,"column":82,"offset":1024},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":39,"column":1,"offset":1026},"end":{"line":39,"column":7,"offset":1032},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":41,"column":1,"offset":1034},"end":{"line":41,"column":6,"offset":1039},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Navigate to File/Folder","position":{"start":{"line":43,"column":4,"offset":1044},"end":{"line":43,"column":27,"offset":1067},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1041},"end":{"line":43,"column":27,"offset":1067},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Go to your forked version of the repo and then the file you want to edit. For example, the ","position":{"start":{"line":45,"column":1,"offset":1069},"end":{"line":45,"column":92,"offset":1160},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/makerdao/community/blob/master/README.md","children":[{"type":"text","value":"main README file","position":{"start":{"line":45,"column":93,"offset":1161},"end":{"line":45,"column":109,"offset":1177},"indent":[]}}],"position":{"start":{"line":45,"column":92,"offset":1160},"end":{"line":45,"column":171,"offset":1239},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":45,"column":171,"offset":1239},"end":{"line":45,"column":172,"offset":1240},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1069},"end":{"line":45,"column":172,"offset":1240},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":47,"column":1,"offset":1242},"end":{"line":47,"column":7,"offset":1248},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":49,"column":1,"offset":1250},"end":{"line":49,"column":6,"offset":1255},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Edit/Add File","position":{"start":{"line":51,"column":4,"offset":1260},"end":{"line":51,"column":17,"offset":1273},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1257},"end":{"line":51,"column":17,"offset":1273},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Edit File","position":{"start":{"line":53,"column":5,"offset":1279},"end":{"line":53,"column":14,"offset":1288},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1275},"end":{"line":53,"column":14,"offset":1288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once in the file, press the pen icon to edit content. This will enter edit mode within Github. Edit mode allows making and proposing new changes without overwriting existing content.","position":{"start":{"line":55,"column":1,"offset":1290},"end":{"line":55,"column":183,"offset":1472},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1290},"end":{"line":55,"column":183,"offset":1472},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/images/edit-github-file.png","alt":"Welcome to Comm-dev","position":{"start":{"line":57,"column":1,"offset":1474},"end":{"line":57,"column":53,"offset":1526},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1474},"end":{"line":57,"column":53,"offset":1526},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Add File","position":{"start":{"line":59,"column":5,"offset":1532},"end":{"line":59,"column":13,"offset":1540},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1528},"end":{"line":59,"column":13,"offset":1540},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once in the folder that represents proper page placement, press “Create new file”. This will add a new .md file in your own GitHub account. This allows you to propose the addition of your content without publishing it right away.","position":{"start":{"line":61,"column":1,"offset":1542},"end":{"line":61,"column":230,"offset":1771},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1542},"end":{"line":61,"column":230,"offset":1771},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":63,"column":1,"offset":1773},"end":{"line":63,"column":7,"offset":1779},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":65,"column":1,"offset":1781},"end":{"line":65,"column":6,"offset":1786},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Propose File Change/New File","position":{"start":{"line":67,"column":4,"offset":1791},"end":{"line":67,"column":32,"offset":1819},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1788},"end":{"line":67,"column":32,"offset":1819},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once file changes are complete, you'll need to commit your changes. To do this scroll to the bottom of the page to where it says \"Commit changes,\" write a short description of your changes, and then click the 'commit changes' button.","position":{"start":{"line":69,"column":1,"offset":1821},"end":{"line":69,"column":234,"offset":2054},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1821},"end":{"line":69,"column":234,"offset":2054},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You will then be prompted to submit a Pull Request (PR). During that process you will be asked for an explanation of changes. This will help any reviewer understand what changes were made, so they can make a decision whether to publish it to the main branch/site. The github GUI makes this easy, but most contributors have a setup that leverages VScode, Atom, or another IDE.","position":{"start":{"line":71,"column":1,"offset":2056},"end":{"line":71,"column":376,"offset":2431},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2056},"end":{"line":71,"column":376,"offset":2431},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/images/github-commit-changes.png","alt":"Commit and PR","position":{"start":{"line":73,"column":1,"offset":2433},"end":{"line":73,"column":52,"offset":2484},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2433},"end":{"line":73,"column":52,"offset":2484},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":75,"column":1,"offset":2486},"end":{"line":75,"column":7,"offset":2492},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":77,"column":1,"offset":2494},"end":{"line":77,"column":6,"offset":2499},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Stage Changes","position":{"start":{"line":79,"column":4,"offset":2504},"end":{"line":79,"column":17,"offset":2517},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2501},"end":{"line":79,"column":17,"offset":2517},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether uploading a file or making changes to existing work, git will catch all changes made. Depending on the environment (code editor, github's website etc.) initiating a live change is as simple as staging fresh update(s) as commits. This image is in VScode:","position":{"start":{"line":81,"column":1,"offset":2519},"end":{"line":81,"column":262,"offset":2780},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2519},"end":{"line":81,"column":262,"offset":2780},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/images/github-simple-commit-vscode.png","alt":"Commit your changes","position":{"start":{"line":83,"column":1,"offset":2782},"end":{"line":83,"column":64,"offset":2845},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2782},"end":{"line":83,"column":64,"offset":2845},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":85,"column":1,"offset":2847},"end":{"line":85,"column":7,"offset":2853},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":87,"column":1,"offset":2855},"end":{"line":87,"column":6,"offset":2860},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Create Pull Request","position":{"start":{"line":89,"column":4,"offset":2865},"end":{"line":89,"column":23,"offset":2884},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2862},"end":{"line":89,"column":23,"offset":2884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether in an IDE, or on Githubs interface, the next step is a pull request (PR). Pull Requests merge any changes (commits) tracked in Git, lumps them together, and suggests a path to merging.","position":{"start":{"line":91,"column":1,"offset":2886},"end":{"line":91,"column":193,"offset":3078},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2886},"end":{"line":91,"column":193,"offset":3078},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/images/pull-request-CTA.png","alt":"Open a pull request CTA","position":{"start":{"line":93,"column":1,"offset":3080},"end":{"line":93,"column":57,"offset":3136},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":3080},"end":{"line":93,"column":57,"offset":3136},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Clicking compare and pull request opens the full pull request page, including checks for merging and fields to exaplin the changes.","position":{"start":{"line":95,"column":1,"offset":3138},"end":{"line":95,"column":132,"offset":3269},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3138},"end":{"line":95,"column":132,"offset":3269},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/images/github-create-pull-request.png","alt":"Create Pull request","position":{"start":{"line":97,"column":1,"offset":3271},"end":{"line":97,"column":63,"offset":3333},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3271},"end":{"line":97,"column":63,"offset":3333},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":99,"column":1,"offset":3335},"end":{"line":99,"column":7,"offset":3341},"indent":[]}},{"type":"jsx","value":"<Box>","position":{"start":{"line":101,"column":1,"offset":3343},"end":{"line":101,"column":6,"offset":3348},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Review/Merge","position":{"start":{"line":103,"column":4,"offset":3353},"end":{"line":103,"column":16,"offset":3365},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3350},"end":{"line":103,"column":16,"offset":3365},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There might be feedback/changes on a PR. A reviewer can approve, request changes, or merge the edited file into the repo. Edits can be made with an open PR (often without leaving Github's website) and the PR will update automatically. Once happy, a reviewer will merge your work and it will be live on the site.","position":{"start":{"line":105,"column":1,"offset":3367},"end":{"line":105,"column":312,"offset":3678},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3367},"end":{"line":105,"column":312,"offset":3678},"indent":[]}},{"type":"jsx","value":"</Box>","position":{"start":{"line":107,"column":1,"offset":3680},"end":{"line":107,"column":7,"offset":3686},"indent":[]}},{"type":"jsx","value":"</Process>","position":{"start":{"line":109,"column":1,"offset":3688},"end":{"line":109,"column":11,"offset":3698},"indent":[]}},{"type":"jsx","value":"<!-- There was a lot of good GitHub documentation in the Contributor Tools Guide -->","position":{"start":{"line":111,"column":1,"offset":3700},"end":{"line":111,"column":85,"offset":3784},"indent":[]}},{"type":"jsx","value":"<!-- I'd hate to lose this content because it's awesome -->","position":{"start":{"line":112,"column":1,"offset":3785},"end":{"line":112,"column":60,"offset":3844},"indent":[]}},{"type":"jsx","value":"<!--\n## GitHub Overview\n\nGitHub is a collaborative development platform for open-source software projects. It uses Git, a version control system, to track and log changes to the source code, and display that history front and center.\n\nMakerDAO uses [GitHub](https://github.com/) for transparent project planning, visible collaboration, and hosting canonical information. It houses all of MakerDAO's documentation and day-to-day work.\n\nComm-Dev takes advantage of GitHub's robust graphic user interface (GUI) for Git; opening issues, and managing content files are the bulk of the work. MakerDAO uses a simple Git branching model, where one party manages the master branch and reviews all changes before adding them.\n\nCheck out this short [video](https://www.youtube.com/watch?v=w3jLJU7DT5E) for a brief intro to GitHub.\n\n:exclamation: **New Users** :exclamation:\n\n***Lost and have no idea how GitHub works?***\n*The tutorials in [Getting Started 101](#getting-started-101) below are a great place to start. They cover many of GitHub's functions used for Comm-Dev. Set aside some time to go through them.*\n\nExperienced users can skip ahead to [Community GitHub Overview](#community-github-overview).\n\n### Getting Started 101\n\n1. Create an account on [GitHub](https://github.com/).\n1. Go through the comprehensive, interactive tutorials on [GitHub Lab](https://lab.github.com).\n    - Set aside a few hours to complete the tutorials.\n1. Click [Find Your First Course](https://lab.github.com/login/github).\n    - Follow prompts to install GitHub Learning Lab to personal repositories.\n1. Go through the introductory learning paths.\n    - [Introduction to GitHub](https://lab.github.com/githubtraining/introduction-to-github)\n    - [First Day on GitHub](https://lab.github.com/githubtraining/paths/first-day-on-github)\n    - [First Week on GitHub](https://lab.github.com/githubtraining/paths/first-week-on-github)\n\n***Pro Tip:** Consider installing [GitHub Desktop](https://desktop.github.com/). Most GitHub functions are available online, but some actions (e.g., uploading images) are more straightforward with GitHub Desktop.*\n\n### Community GitHub Overview\n\nThe [MakerDAO Community Repository](https://github.com/makerdao/community) is the collection of documents and resources relating to initiatives from the Community Development group at MakerDAO.\n\n#### Project Tracking\n\n- **[Issues](https://github.com/makerdao/community/issues)**\n  - Issues contain short, actionable descriptions of tasks.\n- **[Labels](https://github.com/makerdao/community/labels)**\n  - Labels loosely define a document to a subgroup. They typically autofill when assigning an issue (e.g., languages or bounties or hackathons).\n- **[Project Board](https://github.com/makerdao/community/projects)**\n  - This Board reflects the development stages based on the current workflow.\n  - Project Boards use a [Kanban layout](https://en.wikipedia.org/wiki/Kanban_board) to move issues through the columns as they progress.\n    - **Icebox:** Issues that are not active for longer than 60 days.\n    - **Backlog:** Issues that are blocked or not currently active.\n    - **In Progress:** Issues that someone is already tackling.\n    - **Ready for Review:** Issues that need to be reviewed or merged.\n    - **Done:** Issues automatically move here when the issue is closed, or the PR is merged.\n- **[Epics](https://github.com/makerdao/community#workspaces/community-development-5d2475bd23b522535e2def1d/board?filterLogic=any&repos=166580993)**\n  - Epics map to a larger task by nesting multiple issues.\n  - For users that don't have Zenhub, Comm-Dev writes \"Epic\" on one main issue, and includes relevant links.\n  - Epics are more visible with Zenhub.\n    - **Optional:** Download the [Zenhub](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd) extension.\n\n#### Best Practices\n\n***Pro Tip:** Practice in a test environment first to prevent merging issues down the road. Fork the Maker Community repository (repo) or clone it to a local machine.*\n\n- Discuss efforts, blockers, and problems in [#community-development](https://chat.makerdao.com/channel/community-development).\n- Ensure repositories are up to date.\n- Make a practice branch for edits and approvals.\n  - Fetch the most recent changes.\n  - Branch the main repo to create PRs.\n- Create a new issue or find an existing issue.\n  - Include links and dependencies in the issue description.\n  - Close completed issues manually to mark them as done.\n    - It will move within the project board automatically.\n- Commit early and commit often.\n  - Submit changes before large merges.\n  - Make sure commits are explicit in their changes.\n- Link Pull Requests to existing issues.\n  - If unsure of which issue, ask in the [#community-development](https://chat.makerdao.com/channel/community-development) channel.\n- Pull Requests often go through several phases of review before a merge.\n  - An Approver may request changes if a submission does not adhere to guidelines or if it needs general revision.\n  - When reviewing or addressing change requests, indicate which issues are resolved and update them in the PR thread, either issue by issue, or in one summary comment.\n\n### Tips and Visual Guides\n\nClick the links in this section for short animated examples of key GitHub actions useful for Comm-Dev work. Alternatively, scroll through this [GIF gallery](https://imgur.com/a/eeO7OJM) to quickly see all the expedient demos below in one place.\n\n- Clone a repository.\n  - **Example:** [Cloning a GitHub Repository](https://imgur.com/GjX6cf9)\n  - Make sure to have the [repository's URL](repository-url.png)\n- Sync the Comm-Dev repo when it's already on the machine with the Fetch Origin Master button.\n    - In the command line, this is called: `$ git fetch`.\n  - **Example:** [Fetch Origin Master](https://imgur.com/VREFUKV)\n- Use [GitHub Desktop](https://desktop.github.com/) to simplify uploading images.\n- Create distinct branches to later merge changes into the master.\n- Make branch names short.\n  - **Example:** [Upload image locally and create branch name](https://imgur.com/WJ460E8)\n- Rename any incorrectly named files.\n    - Make sure filenames on GitHub include dashes instead of spaces.\n        - GitHub and GitBooks cannot manage links to files with strange characters (e.g., spaces).\n        - See the [naming files](#naming-files-and-versions) section above.\n  - **Example:** [Rename a file and pushing it to a local branch](https://imgur.com/EXwsHzA)\n- GitHub desktop opens Pull Requests in the GitHub web GUI.\n  - **Example:** [Opening a PR with GitHub Desktop](https://imgur.com/iRYNBC4)\n  - **Note:** In the above example, Git tracked all file uploads, compiled each local change (commit) into one PR, and [merged the Pull Request](https://imgur.com/FFIo7nB).\n- Add a file on GitHub’s GUI by opening another Pull Request.\n  - Pull Requests merge any changes tracked in Git, similar to file uploads.\n  - **Example:** [Add a file with GitHub](https://imgur.com/D3025qz)\n- Comm-Dev uses issues to track work.\n  - **Example:** [Opening an Issue](https://imgur.com/MGW0mMJ)\n- Link Pull Requests to the open issue if resolving the issue requires uploading a file.\n  - **Example:** [Uploading a file and closing an issue](https://imgur.com/Kl5LtmQ)\n- Consider this screenshot example of a [Pull Request](github-fixing-a-commit.png) on the Comm-Dev repo with multiple annotations, commits, and requests for changes.\n    - Key points are labeled:\n        1. Multiple commits.\n        2. Connect Pull Request to the issue.\n        3. The approver requests changes.\n        4. The change request asks to fix relative pathing.\n        **Note:** Correctly defining relative paths to files within a repo is a common problem.\n            - Depending on where in the repo the file lives, a relative path may involve:\n                - **Full Stops:** `.`\n                - **Slashes:** `/`\n            - For files in the same folder:\n                - Write the file name or use a full stop with a slash`./`.\n                - **Example:** `file-name.md`\n                - **Example:** `./file-name.md`\n            - To navigate to a file one folder up:\n                - Use two full stops with a slash `../`\n                - **Example:** `../contributing/file-one-folder-up.md`\n        5. Final comments.\n- If changes are correct, comment on the request and \"resolve\" the comments.\n- After addressing all change requests, comment on the PR to notify the Approver that it’s time to merge.\n\n### Other Helpful Resources\n\n- Check out [Getting Started](https://help.github.com/en/github/getting-started-with-github) on GitHub Help.\n  - See [Writing on GitHub](https://help.github.com/en/categories/writing-on-github) for writing and formatting tips.\n- Check out these recommended introductory videos:\n  - [Git & GitHub Crash Course For Beginners](https://youtu.be/SWYqp7iY_Tc)\n  - [Git Tutorials by Corey Schafer](https://www.youtube.com/playlist?list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx)\n- Check out these other introductory guides:\n  - [Git-The Simple Guide](https://rogerdudler.github.io/git-guide/)\n  - [Think like a Git](http://think-like-a-git.net/)\n\n#### Cheat Sheets\n\n- [Git Cheat Sheet by GitHub](https://education.github.com/git-cheat-sheet-education.pdf)\n- [A Dead Simple GitSheet](https://gitsheet.wtf/)\n- [Git-Tower](https://www.git-tower.com/blog/git-cheat-sheet/)\n- [Interactive Cheat Sheet by NDP](https://ndpsoftware.com/git-cheatsheet.html#loc=workspace;)\n\n#### Visual Guides\n\n- [Git Workflow](http://justinhileman.info/article/git-pretty/git-pretty.png)\n- [Visualizing Git](http://onlywei.github.io/explain-git-with-d3/#)\n-->","position":{"start":{"line":113,"column":1,"offset":3845},"end":{"line":263,"column":4,"offset":13541},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":266,"column":1,"offset":13544},"end":{"line":266,"column":31,"offset":13574},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":266,"column":31,"offset":13574}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/rejon/community/src/modules/layouts/mdx_layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Process = makeShortcode(\"Process\");\nconst Box = makeShortcode(\"Box\");\nconst Button = makeShortcode(\"Button\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`How to Use GitHub For One-off Changes`}</h1>\n    <Process mdxType=\"Process\">\n      <Box mdxType=\"Box\">\n        <h2>{`Log into Github`}</h2>\n        <p>{`Make sure you have a GitHub account and you’re logged in.`}</p>\n        <Button to=\"https://github.com/login\" mdxType=\"Button\">Go to Github</Button>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Fork the Repo`}</h2>\n        <p>{`For simple one off tasks, go to the Github website, and `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.github.com/en/github/getting-started-with-github/fork-a-repo\"\n          }}>{`fork`}</a>{` the repository (AKA repo) you are making a change to.`}</p>\n        <p>{`Forking the repo creates your a version of the site on your GitHub so you can make changes without impacting the original project.`}</p>\n        <h3>{`Fork`}</h3>\n        <p>{`On the GitHub Website, navigate to the repository you want to change. For example, `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/makerdao/community\"\n          }}>{`Community Development's GitHub`}</a>{`.`}</p>\n        <p>{`In the top-right corner of the page, click fork\n`}<img parentName=\"p\" {...{\n            \"src\": \"/images/github-fork-community.png\",\n            \"alt\": \"click Fork\"\n          }}></img>{`.`}</p>\n        <p>{`That is it. You are now ready to add a file or make changes to any existing file.`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Navigate to File/Folder`}</h2>\n        <p>{`Go to your forked version of the repo and then the file you want to edit. For example, the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/makerdao/community/blob/master/README.md\"\n          }}>{`main README file`}</a>{`.`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Edit/Add File`}</h2>\n        <h3>{`Edit File`}</h3>\n        <p>{`Once in the file, press the pen icon to edit content. This will enter edit mode within Github. Edit mode allows making and proposing new changes without overwriting existing content.`}</p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/edit-github-file.png\",\n            \"alt\": \"Welcome to Comm-dev\"\n          }}></img></p>\n        <h3>{`Add File`}</h3>\n        <p>{`Once in the folder that represents proper page placement, press “Create new file”. This will add a new .md file in your own GitHub account. This allows you to propose the addition of your content without publishing it right away.`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Propose File Change/New File`}</h2>\n        <p>{`Once file changes are complete, you'll need to commit your changes. To do this scroll to the bottom of the page to where it says \"Commit changes,\" write a short description of your changes, and then click the 'commit changes' button.`}</p>\n        <p>{`You will then be prompted to submit a Pull Request (PR). During that process you will be asked for an explanation of changes. This will help any reviewer understand what changes were made, so they can make a decision whether to publish it to the main branch/site. The github GUI makes this easy, but most contributors have a setup that leverages VScode, Atom, or another IDE.`}</p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/github-commit-changes.png\",\n            \"alt\": \"Commit and PR\"\n          }}></img></p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Stage Changes`}</h2>\n        <p>{`Whether uploading a file or making changes to existing work, git will catch all changes made. Depending on the environment (code editor, github's website etc.) initiating a live change is as simple as staging fresh update(s) as commits. This image is in VScode:`}</p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/github-simple-commit-vscode.png\",\n            \"alt\": \"Commit your changes\"\n          }}></img></p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Create Pull Request`}</h2>\n        <p>{`Whether in an IDE, or on Githubs interface, the next step is a pull request (PR). Pull Requests merge any changes (commits) tracked in Git, lumps them together, and suggests a path to merging.`}</p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/pull-request-CTA.png\",\n            \"alt\": \"Open a pull request CTA\"\n          }}></img></p>\n        <p>{`Clicking compare and pull request opens the full pull request page, including checks for merging and fields to exaplin the changes.`}</p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/github-create-pull-request.png\",\n            \"alt\": \"Create Pull request\"\n          }}></img></p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Review/Merge`}</h2>\n        <p>{`There might be feedback/changes on a PR. A reviewer can approve, request changes, or merge the edited file into the repo. Edits can be made with an open PR (often without leaving Github's website) and the PR will update automatically. Once happy, a reviewer will merge your work and it will be live on the site.`}</p>\n      </Box>\n    </Process>\n    {\n      /* There was a lot of good GitHub documentation in the Contributor Tools Guide */\n    }\n    {\n      /* I'd hate to lose this content because it's awesome */\n    }\n    {\n      /*\n      ## GitHub Overview\n      GitHub is a collaborative development platform for open-source software projects. It uses Git, a version control system, to track and log changes to the source code, and display that history front and center.\n      MakerDAO uses [GitHub](https://github.com/) for transparent project planning, visible collaboration, and hosting canonical information. It houses all of MakerDAO's documentation and day-to-day work.\n      Comm-Dev takes advantage of GitHub's robust graphic user interface (GUI) for Git; opening issues, and managing content files are the bulk of the work. MakerDAO uses a simple Git branching model, where one party manages the master branch and reviews all changes before adding them.\n      Check out this short [video](https://www.youtube.com/watch?v=w3jLJU7DT5E) for a brief intro to GitHub.\n      :exclamation: **New Users** :exclamation:\n      ***Lost and have no idea how GitHub works?***\n      *The tutorials in [Getting Started 101](#getting-started-101) below are a great place to start. They cover many of GitHub's functions used for Comm-Dev. Set aside some time to go through them.*\n      Experienced users can skip ahead to [Community GitHub Overview](#community-github-overview).\n      ### Getting Started 101\n      1. Create an account on [GitHub](https://github.com/).\n      1. Go through the comprehensive, interactive tutorials on [GitHub Lab](https://lab.github.com).\n         - Set aside a few hours to complete the tutorials.\n      1. Click [Find Your First Course](https://lab.github.com/login/github).\n         - Follow prompts to install GitHub Learning Lab to personal repositories.\n      1. Go through the introductory learning paths.\n         - [Introduction to GitHub](https://lab.github.com/githubtraining/introduction-to-github)\n         - [First Day on GitHub](https://lab.github.com/githubtraining/paths/first-day-on-github)\n         - [First Week on GitHub](https://lab.github.com/githubtraining/paths/first-week-on-github)\n      ***Pro Tip:** Consider installing [GitHub Desktop](https://desktop.github.com/). Most GitHub functions are available online, but some actions (e.g., uploading images) are more straightforward with GitHub Desktop.*\n      ### Community GitHub Overview\n      The [MakerDAO Community Repository](https://github.com/makerdao/community) is the collection of documents and resources relating to initiatives from the Community Development group at MakerDAO.\n      #### Project Tracking\n      - **[Issues](https://github.com/makerdao/community/issues)**\n       - Issues contain short, actionable descriptions of tasks.\n      - **[Labels](https://github.com/makerdao/community/labels)**\n       - Labels loosely define a document to a subgroup. They typically autofill when assigning an issue (e.g., languages or bounties or hackathons).\n      - **[Project Board](https://github.com/makerdao/community/projects)**\n       - This Board reflects the development stages based on the current workflow.\n       - Project Boards use a [Kanban layout](https://en.wikipedia.org/wiki/Kanban_board) to move issues through the columns as they progress.\n         - **Icebox:** Issues that are not active for longer than 60 days.\n         - **Backlog:** Issues that are blocked or not currently active.\n         - **In Progress:** Issues that someone is already tackling.\n         - **Ready for Review:** Issues that need to be reviewed or merged.\n         - **Done:** Issues automatically move here when the issue is closed, or the PR is merged.\n      - **[Epics](https://github.com/makerdao/community#workspaces/community-development-5d2475bd23b522535e2def1d/board?filterLogic=any&repos=166580993)**\n       - Epics map to a larger task by nesting multiple issues.\n       - For users that don't have Zenhub, Comm-Dev writes \"Epic\" on one main issue, and includes relevant links.\n       - Epics are more visible with Zenhub.\n         - **Optional:** Download the [Zenhub](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd) extension.\n      #### Best Practices\n      ***Pro Tip:** Practice in a test environment first to prevent merging issues down the road. Fork the Maker Community repository (repo) or clone it to a local machine.*\n      - Discuss efforts, blockers, and problems in [#community-development](https://chat.makerdao.com/channel/community-development).\n      - Ensure repositories are up to date.\n      - Make a practice branch for edits and approvals.\n       - Fetch the most recent changes.\n       - Branch the main repo to create PRs.\n      - Create a new issue or find an existing issue.\n       - Include links and dependencies in the issue description.\n       - Close completed issues manually to mark them as done.\n         - It will move within the project board automatically.\n      - Commit early and commit often.\n       - Submit changes before large merges.\n       - Make sure commits are explicit in their changes.\n      - Link Pull Requests to existing issues.\n       - If unsure of which issue, ask in the [#community-development](https://chat.makerdao.com/channel/community-development) channel.\n      - Pull Requests often go through several phases of review before a merge.\n       - An Approver may request changes if a submission does not adhere to guidelines or if it needs general revision.\n       - When reviewing or addressing change requests, indicate which issues are resolved and update them in the PR thread, either issue by issue, or in one summary comment.\n      ### Tips and Visual Guides\n      Click the links in this section for short animated examples of key GitHub actions useful for Comm-Dev work. Alternatively, scroll through this [GIF gallery](https://imgur.com/a/eeO7OJM) to quickly see all the expedient demos below in one place.\n      - Clone a repository.\n       - **Example:** [Cloning a GitHub Repository](https://imgur.com/GjX6cf9)\n       - Make sure to have the [repository's URL](repository-url.png)\n      - Sync the Comm-Dev repo when it's already on the machine with the Fetch Origin Master button.\n         - In the command line, this is called: `$ git fetch`.\n       - **Example:** [Fetch Origin Master](https://imgur.com/VREFUKV)\n      - Use [GitHub Desktop](https://desktop.github.com/) to simplify uploading images.\n      - Create distinct branches to later merge changes into the master.\n      - Make branch names short.\n       - **Example:** [Upload image locally and create branch name](https://imgur.com/WJ460E8)\n      - Rename any incorrectly named files.\n         - Make sure filenames on GitHub include dashes instead of spaces.\n             - GitHub and GitBooks cannot manage links to files with strange characters (e.g., spaces).\n             - See the [naming files](#naming-files-and-versions) section above.\n       - **Example:** [Rename a file and pushing it to a local branch](https://imgur.com/EXwsHzA)\n      - GitHub desktop opens Pull Requests in the GitHub web GUI.\n       - **Example:** [Opening a PR with GitHub Desktop](https://imgur.com/iRYNBC4)\n       - **Note:** In the above example, Git tracked all file uploads, compiled each local change (commit) into one PR, and [merged the Pull Request](https://imgur.com/FFIo7nB).\n      - Add a file on GitHub’s GUI by opening another Pull Request.\n       - Pull Requests merge any changes tracked in Git, similar to file uploads.\n       - **Example:** [Add a file with GitHub](https://imgur.com/D3025qz)\n      - Comm-Dev uses issues to track work.\n       - **Example:** [Opening an Issue](https://imgur.com/MGW0mMJ)\n      - Link Pull Requests to the open issue if resolving the issue requires uploading a file.\n       - **Example:** [Uploading a file and closing an issue](https://imgur.com/Kl5LtmQ)\n      - Consider this screenshot example of a [Pull Request](github-fixing-a-commit.png) on the Comm-Dev repo with multiple annotations, commits, and requests for changes.\n         - Key points are labeled:\n             1. Multiple commits.\n             2. Connect Pull Request to the issue.\n             3. The approver requests changes.\n             4. The change request asks to fix relative pathing.\n             **Note:** Correctly defining relative paths to files within a repo is a common problem.\n                 - Depending on where in the repo the file lives, a relative path may involve:\n                     - **Full Stops:** `.`\n                     - **Slashes:** `/`\n                 - For files in the same folder:\n                     - Write the file name or use a full stop with a slash`./`.\n                     - **Example:** `file-name.md`\n                     - **Example:** `./file-name.md`\n                 - To navigate to a file one folder up:\n                     - Use two full stops with a slash `../`\n                     - **Example:** `../contributing/file-one-folder-up.md`\n             5. Final comments.\n      - If changes are correct, comment on the request and \"resolve\" the comments.\n      - After addressing all change requests, comment on the PR to notify the Approver that it’s time to merge.\n      ### Other Helpful Resources\n      - Check out [Getting Started](https://help.github.com/en/github/getting-started-with-github) on GitHub Help.\n       - See [Writing on GitHub](https://help.github.com/en/categories/writing-on-github) for writing and formatting tips.\n      - Check out these recommended introductory videos:\n       - [Git & GitHub Crash Course For Beginners](https://youtu.be/SWYqp7iY_Tc)\n       - [Git Tutorials by Corey Schafer](https://www.youtube.com/playlist?list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx)\n      - Check out these other introductory guides:\n       - [Git-The Simple Guide](https://rogerdudler.github.io/git-guide/)\n       - [Think like a Git](http://think-like-a-git.net/)\n      #### Cheat Sheets\n      - [Git Cheat Sheet by GitHub](https://education.github.com/git-cheat-sheet-education.pdf)\n      - [A Dead Simple GitSheet](https://gitsheet.wtf/)\n      - [Git-Tower](https://www.git-tower.com/blog/git-cheat-sheet/)\n      - [Interactive Cheat Sheet by NDP](https://ndpsoftware.com/git-cheatsheet.html#loc=workspace;)\n      #### Visual Guides\n      - [Git Workflow](http://justinhileman.info/article/git-pretty/git-pretty.png)\n      - [Visualizing Git](http://onlywei.github.io/explain-git-with-d3/#)\n      */\n    }\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}